const mongoose = require('mongoose');

mongoose.connect('mongodb://localhost/playground')
.then(() => console.log('Connected to Mongodb'))
.catch(err => console.error('Could not connect to mongodb', err));


/*
SCHEMA
Collection - > Table
Document -> Row
Key -> Column
*/

// Use Joi for validation in RESTful API
//Use mongoose validation for db

const courseSchema = new mongoose.Schema({
  name: {type:String, required:true}, //only meaningful to mongoose
  author: String,
  tags: [ String ],
  date: {type: Date, default: Date.now}
  isPublished: Boolean
});

const Course = mongoose.model('Course',courseSchema);

//Schema Types: String, Number, Date, Buffer(binary date), Boolean, ObjectID, Array


async function createCourse(){

  const course = new Course({
      name: 'Node.js Course',
      author: 'Mosh',
      tags:['node','backend'],
      isPublished: true
    });

    try{
      //const result = await course.save();
      //console.log(result)
    }
    catch (ex){
      //console.log(ex.message);

      for(field in ex.errors){
        //errors is a object
        console.log(ex.errors[field].message);
      }
    }

}

createCourse();


async function getCourses(){

  //$ this sign- to represent this is a opeartor
  const courses = await Course
        //.find({author:'Mosh'})
        //.find({price: {$gt: 10,$lte: 20}})
        //.find({price: {$in: [10,15,20]}})
        //.find()
        //.or([{author: 'Mosh'},{isPublished: true}])

        //Starts with Mosh
        //find({author: /^Mosh/})

        //Ends with Hamedani, i for case-insenstive
        //find({author: /Hamedani$/i})

        //contains Mosh
        //.* -> any no. of chars
        //.find({author: /.*Mosh.*/i})
      .find({author: 'Mosh', isPublished: true})
      .limit(10)
      .sort({name: 1})
      //.count()
      .select({name:1,tags:1});
  console(courses);
}

getCourses();

//comparison query operator
//eq (equal)
//ne (not equal)
//gt (greater than)
//gte (greater or equal to)
//lt (less than)
//lte (less than or equal to)
//in
//nin (not in)

//logical query operator
//or
//and

//Regex


//PAGINATION
//pageNumber = 2, pageSize = 10

--> /api/courses?pageNumber=2&pageSize=10

async function getCourses(){

  //$ this sign- to represent this is a opeartor
  const courses = await Course
      .find({author: 'Mosh', isPublished: true})
      .skip((pageNumber-1)*pageSize)
      .limit(pageSize)
      .sort({name: 1})
      //.count()
      .select({name:1,tags:1});
  console(courses);
}

/*
Approach 1: Query first
findById
Modify its properties
save()

Approach 2: Update first
Update directly
Optionally: get the updated Document
*/

aysnc function updateCourse(id){
      const course =  await Course.findById(id);
      if(!course) return;

      course.isPublished = true;
      course.author = 'Another Author';

      /*
      course.set({
        isPublished:true,
        course.author = 'Another Author'
      });
      */

    const result = await course.save();
    console.log(result);

}

aysnc function updateCourse(id){
      const result =  await Course.update({_id:id},{
        $set{
          author: 'Mosh',
          isPublished: false
        }
      });

    console.log(result);

}

aysnc function updateCourse(id){
      const course =  await Course.findByIdAndUpdate(id,{
        $set{
          author: 'Jack',
          isPublished: true
        }
      },{new: true});
    // set new as true to get the updated document
    console.log(result);

}

updateCourse();

aysnc function removeCourse(id){
//      const result = await Course.deleteOne({_id: id});
      const course = await Course.findByIdAndRemove(id);

      console.log(course);
    //  console.log(result);

}

removeCourse();



Built-in Validators
//
const courseSchema = new mongoose.Schema({
  name: {
    type:String,
    required:true
    minlength: 5,
    maxlength: 255,
    //match: /pattern/
    }, //only meaningful to mongoose
    category:{
      type: String,
      required: true,
      enum: ['web','mobile','network']
      lowercase: true,
      trim: true // to trim padding
    },
  author: String,
  //tags: [ String ],

  tags: {
    type: Array,
    //Custom validator
    validate: {
      validator: function(v){
        return v && v.length > 0;
      },
      message: 'A course should have atleast one tag.'
    }

  },

  date: {type: Date, default: Date.now}
  isPublished: Boolean
  price: {
    type: Number,
    min: 10,
    max: 200,
    required: function(){ return this.isPublished; },
    //arrow function do not have their own this
    get: v => Math.round(v);
    set: v => Math.round(v);
  }
});


async validator
tags: {
  type: Array,
  //Custom validator
  isAsync : true,
  validate: {
    validator: function(v,callback){
    setTimeout( () => {
          //Do Some Async work
          const result = v && v.length > 0;
          callback(result);
    },1000);
    },
    message: 'A course should have atleast one tag.'
  }

},
